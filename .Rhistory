# Cargar librería necesaria
library(rpart)
# Entrenar modelo de Árbol de Decisión
modelo_arbol <- rpart(Precio_USD ~ ., data = train_data, method = "anova")
# Generar predicciones
predicciones_arbol <- predict(modelo_arbol, newdata = test_data)
# Evaluar modelo
res_arbol <- evaluar_modelo(y_test, predicciones_arbol, "Árbol de Decisión")
# Cargar librería necesaria
library(randomForest)
# Entrenar modelo de Random Forest
set.seed(123)
modelo_rf <- randomForest(Precio_USD ~ ., data = train_data, ntree = 100)
# Generar predicciones
predicciones_rf <- predict(modelo_rf, newdata = test_data)
# Evaluar modelo
res_rf <- evaluar_modelo(y_test, predicciones_rf, "Random Forest")
# Cargar librería necesaria
library(gbm)
# Entrenar modelo de Gradient Boosting
set.seed(123)
modelo_gbm <- gbm(Precio_USD ~ ., data = train_data, distribution = "gaussian", n.trees = 100, interaction.depth = 3, shrinkage = 0.1, cv.folds = 5)
# Cargar librería necesaria
library(gbm)
# Entrenar modelo de Gradient Boosting
set.seed(123)
modelo_gbm <- gbm(Precio_USD ~ ., data = train_data, distribution = "gaussian", n.trees = 100, interaction.depth = 3, shrinkage = 0.1, cv.folds = 5)
modelo_gbm <- gbm(Precio_USD ~ .,
data = train_data,
distribution = "gaussian",
n.trees = 100,
interaction.depth = 3,
shrinkage = 0.1,
cv.folds = 5,
n.minobsinnode = 2) # Reducimos el mínimo de observaciones por nodo
# Cargar librería necesaria
library(gbm)
# Entrenar modelo de Gradient Boosting
set.seed(123)
modelo_gbm <- gbm(Precio_USD ~ ., data = train_data, distribution = "gaussian", n.trees = 100, interaction.depth = 3, shrinkage = 0.1, cv.folds = 5)
modelo_gbm <- gbm(Precio_USD ~ .,
data = train_data,
distribution = "gaussian",
n.trees = 100,
interaction.depth = 3,
shrinkage = 0.1,
cv.folds = 3)  # Reducimos los folds
modelo_gbm <- gbm(Precio_USD ~ .,
data = train_data,
distribution = "gaussian",
n.trees = 100,
interaction.depth = 3,
shrinkage = 0.1,
cv.folds = 3)  # Reducimos los folds
# Cargar librería necesaria
library(gbm)
# Entrenar modelo de Gradient Boosting
set.seed(123)
modelo_gbm <- gbm(Precio_USD ~ ., data = train_data, distribution = "gaussian", n.trees = 100, interaction.depth = 3, shrinkage = 0.1, cv.folds = 5)
# Cargar librería necesaria
library(gbm)
# Entrenar modelo de Gradient Boosting
set.seed(123)
modelo_gbm <- gbm(Precio_USD ~ .,
data = train_data,
distribution = "gaussian",
n.trees = 100,
interaction.depth = 3,
shrinkage = 0.1,
cv.folds = min(3, nrow(train_data)), # Ajustamos el número de folds
n.minobsinnode = max(2, floor(nrow(train_data) * 0.01))) # Ajustamos el mínimo de observaciones por nodo
# Cargar librería necesaria
library(gbm)
# Ajustar parámetros para evitar errores en dataset pequeño
set.seed(123)
modelo_gbm <- gbm(
Precio_USD ~ .,
data = train_data,
distribution = "gaussian",
n.trees = 100,
interaction.depth = 3,
shrinkage = 0.1,
bag.fraction = 0.5,  # Reducir la fracción de muestreo
n.minobsinnode = max(2, floor(0.01 * nrow(train_data))),  # Asegurar suficientes observaciones por nodo
cv.folds = min(3, nrow(train_data))  # No más folds que filas en train_data
)
# Cargar librería necesaria
library(gbm)
# Ajustar parámetros para evitar errores en dataset pequeño
set.seed(123)
modelo_gbm <- gbm(
Precio_USD ~ .,
data = train_data,
distribution = "gaussian",
n.trees = 100,
interaction.depth = 3,
shrinkage = 0.1,
bag.fraction = 0.5,  # Reducir la fracción de muestreo
n.minobsinnode = max(2, floor(0.01 * nrow(train_data))),  # Asegurar suficientes observaciones por nodo
cv.folds = min(3, nrow(train_data))  # No más folds que filas en train_data
)
# Cargar librería necesaria
library(gbm)
# Ajustar parámetros para evitar errores en dataset pequeño
set.seed(123)
modelo_gbm <- gbm(
Precio_USD ~ .,
data = train_data,
distribution = "gaussian",
n.trees = 50,  # Reducir número de árboles para evitar sobreajuste en dataset pequeño
interaction.depth = 2,  # Reducir profundidad para evitar sobreajuste
shrinkage = 0.1,
bag.fraction = 0.3,  # Reducir la fracción de muestreo
n.minobsinnode = 1  # Permitir nodos pequeños
)
# Generar predicciones
predicciones_gbm <- predict(modelo_gbm, newdata = test_data, n.trees = 50)
# Evaluar modelo
res_gbm <- evaluar_modelo(y_test, predicciones_gbm, "Gradient Boosting")
# Crear un dataframe con los resultados de los modelos
resultados_modelos <- data.frame(
Modelo = c("Regresión Lineal", "Regresión LASSO", "Regresión Ridge", "Árbol de Decisión"),
MSE = c(mse_lineal, mse_lasso, mse_ridge, mse_arbol),
R2 = c(r2_lineal, r2_lasso, r2_ridge, r2_arbol)
)
# Ordenar por menor MSE y mayor R²
resultados_modelos <- resultados_modelos[order(resultados_modelos$MSE), ]
# Seleccionar el mejor modelo
mejor_modelo <- resultados_modelos[1, ]
# Imprimir resultados
print("Comparación de Modelos:")
print(resultados_modelos)
print("\nMejor Modelo Seleccionado:")
print(mejor_modelo)
# Cargar librerías necesarias
library(ggplot2)
# Crear un dataframe con los resultados de los modelos
resultados_modelos <- data.frame(
Modelo = c("Regresión Lineal", "Regresión LASSO", "Regresión Ridge", "Árbol de Decisión"),
MSE = c(mse_lineal, mse_lasso, mse_ridge, mse_arbol),
R2 = c(r2_lineal, r2_lasso, r2_ridge, r2_arbol)
)
# Ordenar por menor MSE y mayor R²
resultados_modelos <- resultados_modelos[order(resultados_modelos$MSE), ]
# Seleccionar el mejor modelo
mejor_modelo <- resultados_modelos[1, ]
# Imprimir resultados
print("Comparación de Modelos:")
print(resultados_modelos)
print("\nMejor Modelo Seleccionado:")
print(mejor_modelo)
# Visualizar comparación de modelos con gráficos
p1 <- ggplot(resultados_modelos, aes(x = reorder(Modelo, MSE), y = MSE, fill = Modelo)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Comparación de Modelos - MSE", x = "Modelo", y = "MSE") +
theme_minimal()
p2 <- ggplot(resultados_modelos, aes(x = reorder(Modelo, R2), y = R2, fill = Modelo)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Comparación de Modelos - R²", x = "Modelo", y = "R²") +
theme_minimal()
# Mostrar gráficos
print(p1)
print(p2)
# Cargar librerías necesarias
library(plumber)
install.packages("plumber")
# Cargar librerías necesarias
library(plumber)
library(glmnet)  # Para cargar el modelo de regresión Ridge
# Cargar el modelo entrenado
modelo_ridge <- readRDS("modelo_ridge.rds")  # Asegúrate de haber guardado el modelo antes
# Cargar librerías necesarias
library(plumber)
library(glmnet)  # Para cargar el modelo de regresión Ridge
# Cargar el modelo entrenado
modelo_ridge <- readRDS("modelo_ridge.rds")  # Asegúrate de haber guardado el modelo antes
file.exists("modelo_ridge.rds")
getwd()
saveRDS(modelo_ridge, "modelo_ridge.rds")
# Cargar librerías necesarias
library(plumber)
library(glmnet)  # Para cargar el modelo de regresión Ridge
# Cargar el modelo entrenado
modelo_ridge <- readRDS("modelo_ridge.rds")  # Asegúrate de haber guardado el modelo antes
#* @apiTitle API de Predicción de Precios de Bienes Raíces
#* Predice el precio de una propiedad
#* @param Tamaño_m2 Número - Tamaño de la propiedad en m2
#* @param Habitaciones Número - Cantidad de habitaciones
#* @param Baños Número - Cantidad de baños
#* @param Estado Texto - Estado de la propiedad (Nuevo/Usado)
#* @param Estacionamiento Número - 1 si tiene, 0 si no tiene
#* @post /predecir
function(Tamaño_m2, Habitaciones, Baños, Estado, Estacionamiento) {
# Convertir entrada a dataframe
nueva_data <- data.frame(
Tamaño_m2 = as.numeric(Tamaño_m2),
Habitaciones = as.numeric(Habitaciones),
Baños = as.numeric(Baños),
Estado = as.factor(Estado),
Estacionamiento = as.numeric(Estacionamiento)
)
# Realizar predicción
prediccion <- predict(modelo_ridge, newdata = nueva_data)
return(list(Precio_Predicho = prediccion))
}
# Iniciar servidor API
# Guarda este script como "api_modelo.R" y ejecuta en la consola:
# plumber::plumb("api_modelo.R")$run(port = 8000)
# Cargar librerías necesarias
library(plumber)
library(glmnet)  # Para cargar el modelo de regresión Ridge
# Cargar el modelo entrenado
modelo_ridge <- readRDS("modelo_ridge.rds")  # Asegúrate de haber guardado el modelo antes
#* @apiTitle API de Predicción de Precios de Bienes Raíces
#* Predice el precio de una propiedad
#* @param Tamaño_m2 Número - Tamaño de la propiedad en m2
#* @param Habitaciones Número - Cantidad de habitaciones
#* @param Baños Número - Cantidad de baños
#* @param Estado Texto - Estado de la propiedad (Nuevo/Usado)
#* @param Estacionamiento Número - 1 si tiene, 0 si no tiene
#* @post /predecir
function(Tamaño_m2, Habitaciones, Baños, Estado, Estacionamiento) {
# Convertir entrada a dataframe
nueva_data <- data.frame(
Tamaño_m2 = as.numeric(Tamaño_m2),
Habitaciones = as.numeric(Habitaciones),
Baños = as.numeric(Baños),
Estado = as.factor(Estado),
Estacionamiento = as.numeric(Estacionamiento)
)
# Realizar predicción
prediccion <- predict(modelo_ridge, newdata = nueva_data)
return(list(Precio_Predicho = prediccion))
}
# Iniciar servidor API
# Guarda este script como "api_modelo.R" y ejecuta en la consola:
# plumber::plumb("api_modelo.R")$run(port = 8000)
# Cargar librerías necesarias
library(plumber)
library(glmnet)  # Para modelos de regresión Ridge
# Cargar el modelo entrenado
modelo_ridge <- readRDS("modelo_ridge.rds")
#* @apiTitle API de Predicción de Precios de Bienes Raíces
#* Predice el precio de una propiedad
#* @param Tamaño_m2 Número - Tamaño de la propiedad en m2
#* @param Habitaciones Número - Cantidad de habitaciones
#* @param Baños Número - Cantidad de baños
#* @param Estado Texto - Estado de la propiedad (Nuevo/Usado)
#* @param Estacionamiento Número - 1 si tiene, 0 si no tiene
#* @post /predecir
function(Tamaño_m2, Habitaciones, Baños, Estado, Estacionamiento) {
# Convertir entrada a data frame
nueva_data <- data.frame(
Tamaño_m2 = as.numeric(Tamaño_m2),
Habitaciones = as.numeric(Habitaciones),
Baños = as.numeric(Baños),
Estado = as.factor(Estado),  # Asegurar factor
Estacionamiento = as.numeric(Estacionamiento)
)
# Convertir a matriz (requerido por glmnet)
nueva_matriz <- model.matrix(~ Tamaño_m2 + Habitaciones + Baños + Estado + Estacionamiento, data = nueva_data)[, -1]
# Realizar predicción (ajustar s = "lambda.min" si se usó cv.glmnet)
prediccion <- predict(modelo_ridge, newx = nueva_matriz, s = "lambda.min")
return(list(Precio_Predicho = as.numeric(prediccion)))
}
# Iniciar servidor API
# Guarda este script como "api_modelo.R" y ejecuta en la consola:
# plumber::plumb("api_modelo.R")$run(port = 8000)
# Cargar librerías necesarias
library(plumber)
library(glmnet)  # Para cargar el modelo de regresión Ridge
# Cargar el modelo entrenado
modelo_ridge <- readRDS("modelo_ridge.rds")  # Asegúrate de haber guardado el modelo antes
#* @apiTitle API de Predicción de Precios de Bienes Raíces
#* Predice el precio de una propiedad
#* @param Tamaño_m2 Número - Tamaño de la propiedad en m2
#* @param Habitaciones Número - Cantidad de habitaciones
#* @param Baños Número - Cantidad de baños
#* @param Estado Texto - Estado de la propiedad (Nuevo/Usado)
#* @param Estacionamiento Número - 1 si tiene, 0 si no tiene
#* @post /predecir
function(Tamaño_m2, Habitaciones, Baños, Estado, Estacionamiento) {
# Convertir entrada a dataframe
nueva_data <- data.frame(
Tamaño_m2 = as.numeric(Tamaño_m2),
Habitaciones = as.numeric(Habitaciones),
Baños = as.numeric(Baños),
Estado = as.factor(Estado),
Estacionamiento = as.numeric(Estacionamiento)
)
# Realizar predicción
prediccion <- predict(modelo_ridge, newdata = nueva_data)
return(list(Precio_Predicho = prediccion))
}
# Para ejecutar la API, usa este comando en R:
# plumber::plumb("api_modelo.R")$run(port = 8000)
# Guardar el modelo entrenado de Regresión Ridge
saveRDS(modelo_ridge, "modelo_ridge.rds")
# Cargar librerías necesarias
library(plumber)
library(glmnet)  # Para cargar el modelo de regresión Ridge
# Cargar el modelo entrenado
modelo_ridge <- readRDS("modelo_ridge.rds")  # Asegúrate de haber guardado el modelo antes
#* @apiTitle API de Predicción de Precios de Bienes Raíces
#* Predice el precio de una propiedad
#* @param Tamaño_m2 Número - Tamaño de la propiedad en m2
#* @param Habitaciones Número - Cantidad de habitaciones
#* @param Baños Número - Cantidad de baños
#* @param Estado Texto - Estado de la propiedad (Nuevo/Usado)
#* @param Estacionamiento Número - 1 si tiene, 0 si no tiene
#* @post /predecir
function(Tamaño_m2, Habitaciones, Baños, Estado, Estacionamiento) {
# Convertir entrada a dataframe
nueva_data <- data.frame(
Tamaño_m2 = as.numeric(Tamaño_m2),
Habitaciones = as.numeric(Habitaciones),
Baños = as.numeric(Baños),
Estado = as.factor(Estado),
Estacionamiento = as.numeric(Estacionamiento)
)
# Realizar predicción
prediccion <- predict(modelo_ridge, newdata = nueva_data)
return(list(Precio_Predicho = prediccion))
}
# Para ejecutar la API, usa este comando en R:
# plumber::plumb("api_modelo.R")$run(port = 8000)
plumber::plumb("api_modelo.R")$run(port = 8000)
Error en plumber::plumb("api_modelo.R"):
file.exists("api_modelo.R")
getwd()
# Cargar librerías necesarias
library(plumber)
library(glmnet)  # Para cargar el modelo de regresión Ridge
# Cargar el modelo entrenado
modelo_ridge <- readRDS("modelo_ridge.rds")  # Asegúrate de haber guardado el modelo antes
#* @apiTitle API de Predicción de Precios de Bienes Raíces
#* Predice el precio de una propiedad
#* @param Tamaño_m2 Número - Tamaño de la propiedad en m2
#* @param Habitaciones Número - Cantidad de habitaciones
#* @param Baños Número - Cantidad de baños
#* @param Estado Texto - Estado de la propiedad (Nuevo/Usado)
#* @param Estacionamiento Número - 1 si tiene, 0 si no tiene
#* @post /predecir
function(Tamaño_m2, Habitaciones, Baños, Estado, Estacionamiento) {
# Convertir entrada a dataframe
nueva_data <- data.frame(
Tamaño_m2 = as.numeric(Tamaño_m2),
Habitaciones = as.numeric(Habitaciones),
Baños = as.numeric(Baños),
Estado = as.factor(Estado),
Estacionamiento = as.numeric(Estacionamiento)
)
# Realizar predicción
prediccion <- predict(modelo_ridge, newdata = nueva_data)
return(list(Precio_Predicho = prediccion))
}
# Para ejecutar la API, usa este comando en R:
# plumber::plumb("api_modelo.R")$run(port = 8000)
# Cargar librerías necesarias
library(plumber)
library(glmnet)  # Para cargar el modelo Ridge
library(jsonlite)  # Para manejar JSON
# Cargar el modelo entrenado (asumiendo que se guardó previamente)
modelo_ridge <- readRDS("modelo_ridge.rds")
# Crear la API con Plumber
#* @apiTitle API de Predicción de Precios de Bienes Raíces
#* Predice el precio de una propiedad con el modelo Ridge
#* @param Tamano_m2 Tamaño en m2 de la propiedad
#* @param Habitaciones Número de habitaciones
#* @param Baños Número de baños
#* @param Estado Estado de la propiedad (ej. "Nuevo", "Usado")
#* @param Estacionamiento Cantidad de estacionamientos
#* @post /predecir
function(Tamano_m2, Habitaciones, Baños, Estado, Estacionamiento) {
# Convertir entrada en un dataframe
entrada <- data.frame(
Tamaño_m2 = as.numeric(Tamano_m2),
Habitaciones = as.numeric(Habitaciones),
Baños = as.numeric(Baños),
Estado = as.factor(Estado),
Estacionamiento = as.numeric(Estacionamiento)
)
# Convertir variables categóricas en formato adecuado
entrada <- model.matrix(~ . -1, data = entrada)
# Realizar predicción
prediccion <- predict(modelo_ridge, newx = as.matrix(entrada), s = "lambda.min")
# Retornar resultado
return(list(Precio_Predicho = prediccion))
}
# Ejecutar la API en el puerto 8000
# Para probar: http://localhost:8000/__swagger__/
pr <- plumber::plumb("api_modelo.R")
# Cargar librerías necesarias
library(plumber)
library(glmnet)  # Para cargar el modelo Ridge
library(jsonlite)  # Para manejar JSON
# Cargar el modelo entrenado (debe haber sido guardado previamente)
modelo_ridge <- readRDS("modelo_ridge.rds")
# Crear la API con Plumber
#* @apiTitle API de Predicción de Precios de Bienes Raíces
#* Predice el precio de una propiedad con el modelo Ridge
#* @param Tamano_m2 Tamaño en m2 de la propiedad
#* @param Habitaciones Número de habitaciones
#* @param Baños Número de baños
#* @param Estado Estado de la propiedad (ej. "Nuevo", "Usado")
#* @param Estacionamiento Cantidad de estacionamientos
#* @post /predecir
function(Tamano_m2, Habitaciones, Baños, Estado, Estacionamiento) {
# Convertir entrada en un dataframe
entrada <- data.frame(
Tamaño_m2 = as.numeric(Tamano_m2),
Habitaciones = as.numeric(Habitaciones),
Baños = as.numeric(Baños),
Estado = as.factor(Estado),
Estacionamiento = as.numeric(Estacionamiento)
)
# Convertir variables categóricas en formato adecuado
entrada <- model.matrix(~ . -1, data = entrada)
# Realizar predicción
prediccion <- predict(modelo_ridge, newx = as.matrix(entrada), s = "lambda.min")
# Retornar resultado en JSON
return(list(Precio_Predicho = as.numeric(prediccion)))
}
# Ejecutar la API en el puerto 8000
pr <- plumber::plumb("api_modelo.R")
# Cargar librerías necesarias
library(plumber)
library(glmnet)  # Para cargar el modelo Ridge
library(jsonlite)  # Para manejar JSON
# Cargar el modelo entrenado (debe haber sido guardado previamente)
modelo_ridge <- readRDS("modelo_ridge.rds")
# Crear la API con Plumber
#* @apiTitle API de Predicción de Precios de Bienes Raíces
#* Predice el precio de una propiedad con el modelo Ridge
#* @param Tamano_m2 Tamaño en m2 de la propiedad
#* @param Habitaciones Número de habitaciones
#* @param Baños Número de baños
#* @param Estado Estado de la propiedad (ej. "Nuevo", "Usado")
#* @param Estacionamiento Cantidad de estacionamientos
#* @post /predecir
function(Tamano_m2, Habitaciones, Baños, Estado, Estacionamiento) {
# Convertir entrada en un dataframe
entrada <- data.frame(
Tamaño_m2 = as.numeric(Tamano_m2),
Habitaciones = as.numeric(Habitaciones),
Baños = as.numeric(Baños),
Estado = as.factor(Estado),
Estacionamiento = as.numeric(Estacionamiento)
)
# Convertir variables categóricas en formato adecuado
entrada <- model.matrix(~ . -1, data = entrada)
# Realizar predicción
prediccion <- predict(modelo_ridge, newx = as.matrix(entrada), s = "lambda.min")
# Retornar resultado en JSON
return(list(Precio_Predicho = as.numeric(prediccion)))
}
# Ejecutar la API en el puerto 8000
pr <- plumber::plumb("api_modelo.R")
library(plumber)
# Cargar el modelo entrenado
modelo_ridge <- readRDS("modelo_ridge.rds")
# Definir la API
#* @apiTitle API de Predicción de Precios de Bienes Raíces
#* Predice el precio de una propiedad
#* @param Tamano_m2 Número - Tamaño de la propiedad en metros cuadrados
#* @param Habitaciones Número - Cantidad de habitaciones
#* @param Banos Número - Cantidad de baños
#* @param Estado Texto - Estado de la propiedad (ej. 'Nuevo', 'Usado')
#* @param Estacionamiento Número - Número de estacionamientos
#* @post /predecir
function(Tamano_m2, Habitaciones, Banos, Estado, Estacionamiento) {
# Convertir entrada a data frame
nueva_data <- data.frame(
Tamano_m2 = as.numeric(Tamano_m2),
Habitaciones = as.numeric(Habitaciones),
Banos = as.numeric(Banos),
Estado = as.factor(Estado),
Estacionamiento = as.numeric(Estacionamiento)
)
# Realizar predicción
prediccion <- predict(modelo_ridge, newdata = nueva_data)
return(list(precio_predicho = prediccion))
}
# Iniciar la API en el puerto 8000
pr <- plumb("api_modelo.R")
Rscript api_modelo.R
lsource("api_modelo.R")
source("api_modelo.R")
plumber::plumb("api_modelo.R")$run(port = 8000)
> plumber::plumb("api_modelo.R")$run(port = 8000)
plumber::plumb("api_modelo.R")$run(port = 8000)
plumber::plumb("api_modelo.R")$run(port = 8000)
install.packages("plumber")
library(plumber)
pr <- plumber::plumb("api_modelo.R")
modelo <- readRDS("modelo_ridge.rds")
library(plumber)
pr <- plumber::plumb("api_modelo.R")
library(plumber)
pr <- plumber::plumb("api_modelo.R")
library(plumber)
pr <- plumber::plumb("api_modelo.R")
library(plumber)
pr <- plumber::plumb("api_modelo.R")
library(plumber)
pr <- plumber::plumb("api_modelo.R")
save.image("C:/TRABAJO FINAL/packets.RData")
library(plumber)
pr <- plumber::plumb("api_modelo.R")
save.image("C:/TRABAJO FINAL/packets.RData")
